Index: setup.py
===================================================================
--- setup.py	(revision 75235)
+++ setup.py	(working copy)
@@ -99,6 +99,11 @@
         # Remove modules that are present on the disabled list
         self.extensions = [ext for ext in self.extensions
                            if ext.name not in disabled_module_list]
+        # move ctypes to the end, it depends on other modules
+        ext_map = dict((ext.name, i) for i, ext in enumerate(self.extensions))
+        if "_ctypes" in ext_map:
+            ctypes = self.extensions.pop(ext_map["_ctypes"])
+            self.extensions.append(ctypes)
 
         # Fix up the autodetected modules, prefixing all the source files
         # with Modules/ and adding Python's include directory to the path.
@@ -197,6 +202,19 @@
                 'WARNING: skipping import check for Carbon-based "%s"' %
                 ext.name)
             return
+
+        if self.get_platform() == 'darwin' and (
+                sys.maxint > 2**32 and '-arch' in ext.extra_link_args):
+            # Don't bother doing an import check when an extension was
+            # build with an explicit '-arch' flag on OSX. That's currently
+            # only used to build 32-bit only extensions in a 4-way
+            # universal build and loading 32-bit code into a 64-bit
+            # process will fail.
+            self.announce(
+                'WARNING: skipping import check for "%s"' %
+                ext.name)
+            return
+
         # Workaround for Cygwin: Cygwin currently has fork issues when many
         # modules have been imported
         if self.get_platform() == 'cygwin':
@@ -295,7 +313,10 @@
         # lib_dirs and inc_dirs are used to search for files;
         # if a file is found in one of those directories, it can
         # be assumed that no additional -I,-L directives are needed.
-        lib_dirs = self.compiler.library_dirs + [
+        mlib_dirs = []
+        for i in os.environ.get('LD_RUN_PATH', '').split(':'):
+            mlib_dirs.append(i)
+        lib_dirs = mlib_dirs + self.compiler.library_dirs + [
             '/lib64', '/usr/lib64',
             '/lib', '/usr/lib',
             ]
@@ -475,8 +496,10 @@
             # MacOSX 10.4 has a broken readline. Don't try to build
             # the readline module unless the user has installed a fixed
             # readline package
-            if find_file('readline/rlconf.h', inc_dirs, []) is None:
-                do_readline = False
+            # with minitage readline version, compile otb
+#            if find_file('readline/rlconf.h', inc_dirs, []) is None:
+#                do_readline = False
+            print "i am a no op in minitage :D"
         if do_readline:
             if sys.platform == 'darwin':
                 # In every directory on the search path search for a dynamic
@@ -505,7 +528,8 @@
                                    library_dirs=['/usr/lib/termcap'],
                                    extra_link_args=readline_extra_link_args,
                                    libraries=readline_libs) )
-        if platform not in ['mac']:
+        # allowed by minitage
+        if platform not in ['compile otb in minitage']:
             # crypt module.
 
             if self.compiler.find_library_file(lib_dirs, 'crypt'):
@@ -541,8 +565,9 @@
         if (ssl_incs is not None and
             ssl_libs is not None):
             exts.append( Extension('_ssl', ['_ssl.c'],
-                                   include_dirs = ssl_incs,
-                                   library_dirs = ssl_libs,
+                                   # they are already in compilation flags when building with minitage
+                                   #include_dirs = ssl_incs,
+                                   #library_dirs = ssl_libs,
                                    libraries = ['ssl', 'crypto'],
                                    depends = ['socketmodule.h']), )
 
@@ -745,9 +770,10 @@
             # some unusual system configurations (e.g. the directory
             # is on an NFS server that goes away).
             exts.append(Extension('_bsddb', ['_bsddb.c'],
-                                  library_dirs=dblib_dir,
-                                  runtime_library_dirs=dblib_dir,
-                                  include_dirs=db_incs,
+                                  # defined by minitage
+                                  #library_dirs=dblib_dir,
+                                  #runtime_library_dirs=dblib_dir,
+                                  #include_dirs=db_incs,
                                   libraries=dblibs))
         else:
             if db_setup_debug: print "db: no appropriate library found"
@@ -949,8 +975,8 @@
                                    libraries = curses_libs) )
 
         # If the curses module is enabled, check for the panel module
-        if (module_enabled(exts, '_curses') and
-            self.compiler.find_library_file(lib_dirs, panel_library)):
+        if (module_enabled(exts, '_curses')): # always true on minitage and
+            #self.compiler.find_library_file(lib_dirs, panel_library)):
             exts.append( Extension('_curses_panel', ['_curses_panel.c'],
                                    libraries = [panel_library] + curses_libs) )
 
@@ -1018,7 +1044,10 @@
 
         exts.append(Extension('pyexpat',
                               define_macros = define_macros,
-                              include_dirs = [expatinc],
+                              # defined by minitage
+                              # include_dirs = [expatinc],
+                              # force link against minitage expat
+                              libraries = ['expat'],
                               sources = ['pyexpat.c',
                                          'expat/xmlparse.c',
                                          'expat/xmlrole.c',
@@ -1033,7 +1062,10 @@
             define_macros.append(('USE_PYEXPAT_CAPI', None))
             exts.append(Extension('_elementtree',
                                   define_macros = define_macros,
-                                  include_dirs = [expatinc],
+                                  # defined by minitage
+                                  # include_dirs = [expatinc],
+                                  # force link against minitage expat
+                                  libraries = ['expat'],
                                   sources = ['_elementtree.c'],
                                   ))
 
@@ -1118,21 +1150,23 @@
             core_kwds = {'extra_compile_args': carbon_extra_compile_args,
                          'extra_link_args': ['-framework', 'CoreFoundation'],
                         }
-            addMacExtension('_CF', core_kwds, ['cf/pycfbridge.c'])
-            addMacExtension('autoGIL', core_kwds)
+            #addMacExtension('_CF', core_kwds, ['cf/pycfbridge.c'])
+            #addMacExtension('autoGIL', core_kwds)
 
             # Carbon
             carbon_kwds = {'extra_compile_args': carbon_extra_compile_args,
                            'extra_link_args': ['-framework', 'Carbon'],
                           }
-            CARBON_EXTS = ['ColorPicker', 'gestalt', 'MacOS', 'Nav',
-                           'OSATerminology', 'icglue',
+            CARBON_EXTS = [#'ColorPicker', 
+                           'gestalt', 'MacOS', 
+                           #'Nav',
+                           #'OSATerminology', 'icglue',
                            # All these are in subdirs
-                           '_AE', '_AH', '_App', '_CarbonEvt', '_Cm', '_Ctl',
-                           '_Dlg', '_Drag', '_Evt', '_File', '_Folder', '_Fm',
-                           '_Help', '_Icn', '_IBCarbon', '_List',
-                           '_Menu', '_Mlte', '_OSA', '_Res', '_Qd', '_Qdoffs',
-                           '_Scrap', '_Snd', '_TE', '_Win',
+                           #'_AE', '_AH', '_App', '_CarbonEvt', '_Cm', '_Ctl',
+                           #'_Dlg', '_Drag', '_Evt', '_File', '_Folder', '_Fm',
+                           #'_Help', '_Icn', '_IBCarbon', '_List',
+                           #'_Menu', '_Mlte', '_OSA', '_Res', '_Qd', '_Qdoffs',
+                           #'_Scrap', '_Snd', '_TE', '_Win',
                           ]
             for name in CARBON_EXTS:
                 addMacExtension(name, carbon_kwds)
@@ -1144,10 +1178,10 @@
             addMacExtension('_Launch', app_kwds)
             addMacExtension('_CG', app_kwds)
 
-            exts.append( Extension('_Qt', ['qt/_Qtmodule.c'],
-                        extra_compile_args=carbon_extra_compile_args,
-                        extra_link_args=['-framework', 'QuickTime',
-                                     '-framework', 'Carbon']) )
+#            exts.append( Extension('_Qt', ['qt/_Qtmodule.c'],
+#                        extra_compile_args=carbon_extra_compile_args,
+#                        extra_link_args=['-framework', 'QuickTime',
+#                                     '-framework', 'Carbon']) )
 
 
         self.extensions.extend(exts)
@@ -1325,7 +1359,37 @@
         # *** Uncomment these for TOGL extension only:
         #       -lGL -lGLU -lXext -lXmu \
 
+    def configure_ctypes_darwin(self, ext):
+        # Darwin (OS X) uses preconfigured files, in
+        # the Modules/_ctypes/libffi_osx directory.
+        (srcdir,) = sysconfig.get_config_vars('srcdir')
+        ffi_srcdir = os.path.abspath(os.path.join(srcdir, 'Modules',
+                                                  '_ctypes', 'libffi_osx'))
+        sources = [os.path.join(ffi_srcdir, p)
+                   for p in ['ffi.c',
+                             'x86/darwin64.S',
+                             'x86/x86-darwin.S',
+                             'x86/x86-ffi_darwin.c',
+                             'x86/x86-ffi64.c',
+                             'powerpc/ppc-darwin.S',
+                             'powerpc/ppc-darwin_closure.S',
+                             'powerpc/ppc-ffi_darwin.c',
+                             'powerpc/ppc64-darwin_closure.S',
+                             ]]
+
+        # Add .S (preprocessed assembly) to C compiler source extensions.
+        self.compiler.src_extensions.append('.S')
+
+        include_dirs = [os.path.join(ffi_srcdir, 'include'),
+                        os.path.join(ffi_srcdir, 'powerpc')]
+        ext.include_dirs.extend(include_dirs)
+        ext.sources.extend(sources)
+        return True
+
     def configure_ctypes(self, ext):
+        if sys.platform == 'darwin':
+            self.use_system_libffi = False
+            return self.configure_ctypes_darwin(ext)
         if not self.use_system_libffi:
             (srcdir,) = sysconfig.get_config_vars('srcdir')
             ffi_builddir = os.path.join(self.build_temp, 'libffi')
@@ -1338,7 +1402,7 @@
             config_sources = [os.path.join(ffi_srcdir, fname)
                               for fname in os.listdir(ffi_srcdir)
                               if os.path.isfile(os.path.join(ffi_srcdir, fname))]
-            if self.force or newer_group(config_sources,
+            if self.force or newer_group(config_sources ,
                                          ffi_configfile):
                 from distutils.dir_util import mkpath
                 mkpath(ffi_builddir)
@@ -1354,10 +1418,13 @@
                     print "Failed to configure _ctypes module"
                     return False
 
+
             fficonfig = {}
             execfile(ffi_configfile, globals(), fficonfig)
             ffi_srcdir = os.path.join(fficonfig['ffi_srcdir'], 'src')
 
+
+
             # Add .S (preprocessed assembly) to C compiler source extensions.
             self.compiler.src_extensions.append('.S')
 
@@ -1384,7 +1451,9 @@
         depends = ['_ctypes/ctypes.h']
 
         if sys.platform == 'darwin':
+            print 
             sources.append('_ctypes/darwin/dlfcn_simple.c')
+            extra_compile_args.append('-DMACOSX')
             include_dirs.append('_ctypes/darwin')
 # XXX Is this still needed?
 ##            extra_link_args.extend(['-read_only_relocs', 'warning'])
@@ -1400,6 +1469,9 @@
             # finding some -z option for the Sun compiler.
             extra_link_args.append('-mimpure-text')
 
+        elif sys.platform.startswith('hp-ux'):
+            extra_link_args.append('-fPIC')
+
         ext = Extension('_ctypes',
                         include_dirs=include_dirs,
                         extra_compile_args=extra_compile_args,
@@ -1414,6 +1486,11 @@
         if not '--with-system-ffi' in sysconfig.get_config_var("CONFIG_ARGS"):
             return
 
+        if sys.platform == 'darwin':
+            # OS X 10.5 comes with libffi.dylib; the include files are
+            # in /usr/include/ffi
+            inc_dirs.append('/usr/include/ffi')
+
         ffi_inc = find_file('ffi.h', [], inc_dirs)
         if ffi_inc is not None:
             ffi_h = ffi_inc[0] + '/ffi.h'
@@ -1436,6 +1513,7 @@
             ext.include_dirs.extend(ffi_inc)
             ext.libraries.append(ffi_lib)
             self.use_system_libffi = True
+        self.use_system_libffi = True
 
 
 class PyBuildInstall(install):
